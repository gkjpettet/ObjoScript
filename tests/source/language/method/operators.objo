class Foo {
  +(other) { return "infix + " + other }
  -(other) { return "infix - " + other }
  *(other) { return "infix * " + other }
  /(other) { return "infix / " + other }
  %(other) { return "infix % " + other }
  <(other) { return "infix < " + other }
  >(other) { return "infix > " + other }
  <=(other) { return "infix <= " + other }
  >=(other) { return "infix >= " + other }
  ==(other) { return "infix == " + other }
  <>(other) { return "infix <> " + other }
  &(other) { return "infix & " + other }
  |(other) { return "infix | " + other }
  is(other) { return "infix is " + other }

  not() { return "prefix not" }
  ~() { return "prefix ~" }
  -() { return "prefix -" }
}

var foo = Foo()
System.print(foo + "a") # expect: infix + a
System.print(foo - "a") # expect: infix - a
System.print(foo * "a") # expect: infix * a
System.print(foo / "a") # expect: infix / a
System.print(foo % "a") # expect: infix % a
System.print(foo < "a") # expect: infix < a
System.print(foo > "a") # expect: infix > a
System.print(foo <= "a") # expect: infix <= a
System.print(foo >= "a") # expect: infix >= a
System.print(foo == "a") # expect: infix == a
System.print(foo <> "a") # expect: infix <> a
System.print(foo & "a") # expect: infix & a
System.print(foo | "a") # expect: infix | a
System.print(not foo) # expect: prefix not
System.print(~foo) # expect: prefix ~
System.print(-foo) # expect: prefix -
System.print(foo is "a") # expect: infix is a