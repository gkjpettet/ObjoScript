/// The order that classes are instantiated in the runtime core
/// is critical.

/// ----------------------------------------------------
/// OBJECT
/// ----------------------------------------------------
/// This must be the first class defined in the runtime.
foreign class Object {
// Overloaded operators.
foreign ==(other)
foreign <>(other)
foreign is(other)
foreign static ==(other)
foreign static <>(other)
foreign static is(other)

// -----------------
// Instance methods.
// -----------------
not() {
// Returns false since most objects are considered true.
return true
}

foreign hasMethod(signature)
foreign superType()
foreign toString()
foreign type()

// -----------------
// Static methods.
// -----------------
foreign static hasMethod(signature)
}

/// ----------------------------------------------------
/// CLASS
/// ----------------------------------------------------
class Class {
constructor(name, superclass) {
_name = name
_superclass = superclass
}

// The name of the class.
name { return _name }

// The name of the superclass. Will be nothing for `Object`.
superclass { return _superclass }
}

/// ----------------------------------------------------
/// NOTHING
/// ----------------------------------------------------
/// This must be the second class defined in the runtime.
foreign class Nothing {
foreign not()
foreign toString()
}

/// ----------------------------------------------------
/// BOOLEAN
/// ----------------------------------------------------
foreign class Boolean {
foreign not()
foreign toString()
}

/// ----------------------------------------------------
/// NUMBER
/// ----------------------------------------------------
foreign class Number {
foreign +(other)
foreign <(other)
foreign <=(other)
foreign >(other)
foreign >=(other)
foreign isInteger()
foreign sqrt()
}

/// ----------------------------------------------------
/// KEYVALUE
/// ----------------------------------------------------
foreign class KeyValue {
constructor() {}
constructor(key, value) {}

foreign key()
foreign key=(k)
foreign toString()
foreign value()
foreign value=(v)
}

/// ----------------------------------------------------
/// SEQUENCE
/// ----------------------------------------------------
/// An abstract class for any iterable object.
/// Any class that implements the `iterator protocol` can 
/// extend this class to get a number of helpful methods.
class Sequence {
/// Tests whether all the elements in the sequence pass the predicate.
/// Iterates over the sequence, passing each element to the function `predicate()`. 
/// If the function returns something false, it stops iterating and returns false. 
/// Otherwise, returns true.
all(predicate) {
var result = true
foreach element in this {
result = predicate(element)
if result == false then return false
}
return true
}

/// Tests whether any element in the sequence passed the `predicate`.
///
/// Iterates over the sequence, passing each element to the function `predicate(_)`.
/// If the function returns true then the sequence stops iterating and returns true. 
/// Otherwise it returns false.
any(predicate) {
var result = true
foreach element in this {
result = predicate(element)
if result then return true
}
return false
}

/// Returns true if the sequence contains `element`.
contains(element) {
foreach item in this {
if element == item then return true
}
return false
}

/// Returns the number of elements in the sequence.
count {
var result = 0
foreach item in this {
result = result + 1
}
return result
}

/// Returns the number of elements in the sequence that pass the predicate.
/// Iterates over the sequence, passing each element to the function `predicate(_)` and 
/// counting the number of times the returned value evaluates to true.
count(predicate) {
var result = 0
foreach element in this {
if predicate(element) then result = result + 1
}
return result
}

/// Iterates over the sequence, passing each element to the given `action(_)` function.
each(action) {
foreach element in this { action(element) }
}

/// Returns true if the sequence has no elements.
/// More efficient than `count == 0` as it's doesn't iterate over the entire sequence.
/// Relies on the fact that calling `iterate(nothing)` on an object that implements
/// the `iterator protocol` returns the first item or `false` if there are no items.
isEmpty {
return this.iterate(nothing) ? false : true
}
}

/// ----------------------------------------------------
/// STRING
/// ----------------------------------------------------
foreign class String {
foreign +(other)

foreign beginsWith(prefix)
foreign codePoints()
foreign count()
}

/// ----------------------------------------------------
/// LIST
/// ----------------------------------------------------
// The List class represents a single dimension array.
foreign class List is Sequence {
foreign static filled(size, element)

foreign add(item)

/// Appends each element of `other` in the same order to the end of the list. 
/// `other` must be an iterable.
addAll(other) {
foreach element in other {
add(element)
}
return other
}

foreign clear()
foreign clone()
foreign count()
foreign indexOf(value)
foreign insert(index, value)
foreign remove(value)
foreign removeAt(index)
foreign swap(index0, index1)
foreign toString()

// Iterator protocol.
foreign iterate(iter)
foreign iteratorValue(iter)

/// Creates a new list by concatenating this list and `other` (an iterable).
+(other) {
var result = this.clone
foreach element in other {
result.add(element)
}
return result
}

/// Creates a new list by repeating this one count times. 
/// It is a runtime error if `count` is not a non-negative integer.
*(count) {
assert(count is Number, "`count` must be a number.")
assert(count.isInteger, "`count` must be an integer.")
assert(count > 0, "`count` must be a non-negative integer.")

var result = []
foreach i in 0...count {
result.addAll(this)
}
return result
}

foreign [index]
foreign [index]=(value)
}

/// ----------------------------------------------------
/// MAP
/// ----------------------------------------------------
// The Map class represents a key-value dictionary.
foreign class Map is Sequence {
foreign clear()
foreign containsKey(key)
foreign count()
foreign iterate(iter)
foreign iteratorValue(iter)
foreign keys()
foreign remove(value)
foreign toString()
foreign values()

// Operator overloads.
foreign [key]
foreign [key]=(value)

}

/// ----------------------------------------------------
/// RANGE
/// ----------------------------------------------------
// The Range class represents an iterable range of numbers 
// with an upper and lower bounds.
foreign class Range {
constructor(lower, upper) {}

foreign iterate(iter)
foreign iteratorValue(iter)

toString() { return _lower + ":" + _upper }
}

/// ----------------------------------------------------
/// SYSTEM
/// ----------------------------------------------------
/// The System class contains useful functionality for 
/// the VM.
foreign class System {
foreign static clock()
foreign static print(object)   
}

/// ----------------------------------------------------
/// MATHS
/// ----------------------------------------------------
/// The Maths class contains useful mathematical 
/// constants and functions.
foreign class Maths {
foreign static pi()
}